use crate::ast::*;
use crate::types::*;

grammar;

List<T, S>: Vec<T> = {
    <mut v:(<T> S)*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

ListTerminated<T, S>: Vec<T> = <(<T> S)*> => <>;

pub Module: Module = <ty_defs:(<TypeDef>)*> <fns:(<Function>)*> => Module {
    fns,
    ty_defs: ty_defs.into_iter().collect()
};

pub Function: Function = "fn" <name:Ident> "(" <args:List<Arg, ",">> ")" "->" <ret_ty:Type> <body:Block> => Function {<>};

Arg: Arg = <name:Ident> ":" <ty:Type> => Arg {<>};

Expr: Expr = {
    "(" <Expr> ")",
    Ident => Expr::Ident(<>),
    Call => Expr::Call(<>),
    Block => Expr::Block(Box::new(<>)),
    IfElse => Expr::IfElse(Box::new(<>)),
}

Ident: Ident = <r"[_a-zA-Z][_'a-zA-Z0-9]*"> => Ident(<>.into());

Call: Call = <ident:Ident> "(" <args:List<Expr, ",">> ")" => Call {<>};

Block: Block = "{" <stmnts:ListTerminated<Statement, ";">> <ret:Expr> "}" => Block {<>};

IfElse: IfElse = "if" <cond:Expr> <iff:Block> "else" <elsee:Block> => IfElse {<>};

Statement: Statement = "let" <ident:Ident> "=" <value:Expr> => Statement {<>};

TypeDef: (String, Type) = "type" <name:Ident> "=" <ty:Type> ";" => (name.0, ty);

Type: Type = {
    Tuple => Type::Tuple(<>),
    Enum => Type::Enum(<>),
    <i:Ident> => Type::Named(i.0)
}

Tuple: Tuple = "(" <elems:List<Type, ",">> ")" => Tuple {<>};

Enum: Enum = "[" <variants:List<Type, "|">> "]" => Enum {<>};
